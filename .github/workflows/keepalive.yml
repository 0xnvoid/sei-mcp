 name: Keep Services Awake

 on:
  schedule:
    - cron: "*/10 * * * *" # default every 10 minutes
  workflow_dispatch:
    inputs:
      urls:
        description: "Comma or newline separated list of health URLs (e.g. https://app.onrender.com/health,https://other/health)"
        required: false
        type: string

 permissions:
  contents: read

 concurrency:
  group: keepalive-${{ github.workflow }}
  cancel-in-progress: false

 jobs:
  discord_keepalive:
    name: Discord keepalive
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      HEALTH_URL_VAR: ${{ vars.DISCORD_HEALTH_URL }}
      HEALTH_URL_SECRET: ${{ secrets.DISCORD_HEALTH_URL }}
    steps:
      - name: Resolve health URL
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          HEALTH_URL="${HEALTH_URL_VAR:-}"
          if [ -z "${HEALTH_URL}" ]; then HEALTH_URL="${HEALTH_URL_SECRET:-}"; fi
          if [ -z "${HEALTH_URL}" ]; then
            echo "Discord HEALTH URL not set. Define vars.DISCORD_HEALTH_URL or secrets.DISCORD_HEALTH_URL." >&2
            exit 1
          fi
          echo "health=${HEALTH_URL}" >> "$GITHUB_OUTPUT"
      - name: Derive base URL
        id: derive
        shell: bash
        env:
          HEALTH_URL: ${{ steps.resolve.outputs.health }}
        run: |
          set -euo pipefail
          url="${HEALTH_URL}"
          url_no_trailing=${url%/}
          base=${url_no_trailing%/health}
          if [ "$base" = "$url_no_trailing" ]; then
            base="$url_no_trailing"
            health="$url_no_trailing"
          else
            health="$url_no_trailing"
          fi
          echo "Base URL: $base"
          echo "Health URL: $health"
          echo "base=$base" >> $GITHUB_OUTPUT
          echo "health=$health" >> $GITHUB_OUTPUT
      - name: Ping endpoints (with retries and backoff)
        env:
          BASE_URL: ${{ steps.derive.outputs.base }}
          HEALTH: ${{ steps.derive.outputs.health }}
        run: |
          set -e
          echo "Targets: BASE=${BASE_URL} HEALTH=${HEALTH}"
          max_attempts=15
          delay=5
          for i in $(seq 1 $max_attempts); do
            echo "Attempt $i/${max_attempts}: warming BASE (${BASE_URL})"
            status_base=$(curl -A "keepalive-gha/1.3" -s -o /dev/null -w "%{http_code}" --max-time 30 -L "${BASE_URL}") || true
            echo "BASE HTTP ${status_base}"
            if [ "$status_base" -ge 200 ] && [ "$status_base" -lt 400 ]; then
              echo "BASE ok"
            else
              echo "BASE not ready (${status_base})"
            fi
            echo "Attempt $i/${max_attempts}: checking HEALTH (${HEALTH})"
            status_health=$(curl -A "keepalive-gha/1.3" -s -o /dev/null -w "%{http_code}" --max-time 30 -L "${HEALTH}") || true
            echo "HEALTH HTTP ${status_health}"
            if [ "$status_health" -ge 200 ] && [ "$status_health" -lt 400 ]; then
              echo "Health check success"
              exit 0
            fi
            echo "Not ready yet (BASE=${status_base}, HEALTH=${status_health}). Backing off for ${delay}s..."
            sleep $delay
            if [ $delay -lt 60 ]; then
              delay=$((delay * 2))
              if [ $delay -gt 60 ]; then delay=60; fi
            fi
          done
          echo "All attempts failed"
          exit 1

  faucet_keepalive:
    name: Faucet keepalive
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      HEALTH_URL_VAR: ${{ vars.FAUCET_HEALTH_URL }}
      HEALTH_URL_SECRET: ${{ secrets.FAUCET_HEALTH_URL }}
    steps:
      - name: Resolve health URL
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          HEALTH_URL="${HEALTH_URL_VAR:-}"
          if [ -z "${HEALTH_URL}" ]; then HEALTH_URL="${HEALTH_URL_SECRET:-}"; fi
          if [ -z "${HEALTH_URL}" ]; then
            echo "Faucet HEALTH URL not set. Define vars.FAUCET_HEALTH_URL or secrets.FAUCET_HEALTH_URL." >&2
            exit 1
          fi
          echo "health=${HEALTH_URL}" >> "$GITHUB_OUTPUT"
      - name: Derive base URL
        id: derive
        shell: bash
        env:
          HEALTH_URL: ${{ steps.resolve.outputs.health }}
        run: |
          set -euo pipefail
          url="${HEALTH_URL}"
          url_no_trailing=${url%/}
          base=${url_no_trailing%/health}
          if [ "$base" = "$url_no_trailing" ]; then
            base="$url_no_trailing"
            health="$url_no_trailing"
          else
            health="$url_no_trailing"
          fi
          echo "Base URL: $base"
          echo "Health URL: $health"
          echo "base=$base" >> $GITHUB_OUTPUT
          echo "health=$health" >> $GITHUB_OUTPUT
      - name: Ping endpoints (with retries and backoff)
        env:
          BASE_URL: ${{ steps.derive.outputs.base }}
          HEALTH: ${{ steps.derive.outputs.health }}
        run: |
          set -e
          echo "Targets: BASE=${BASE_URL} HEALTH=${HEALTH}"
          max_attempts=15
          delay=5
          for i in $(seq 1 $max_attempts); do
            echo "Attempt $i/${max_attempts}: warming BASE (${BASE_URL})"
            status_base=$(curl -A "keepalive-gha/1.3" -s -o /dev/null -w "%{http_code}" --max-time 30 -L "${BASE_URL}") || true
            echo "BASE HTTP ${status_base}"
            if [ "$status_base" -ge 200 ] && [ "$status_base" -lt 400 ]; then
              echo "BASE ok"
            else
              echo "BASE not ready (${status_base})"
            fi
            echo "Attempt $i/${max_attempts}: checking HEALTH (${HEALTH})"
            status_health=$(curl -A "keepalive-gha/1.3" -s -o /dev/null -w "%{http_code}" --max-time 30 -L "${HEALTH}") || true
            echo "HEALTH HTTP ${status_health}"
            if [ "$status_health" -ge 200 ] && [ "$status_health" -lt 400 ]; then
              echo "Health check success"
              exit 0
            fi
            echo "Not ready yet (BASE=${status_base}, HEALTH=${status_health}). Backing off for ${delay}s..."
            sleep $delay
            if [ $delay -lt 60 ]; then
              delay=$((delay * 2))
              if [ $delay -gt 60 ]; then delay=60; fi
            fi
          done
          echo "All attempts failed"
          exit 1
